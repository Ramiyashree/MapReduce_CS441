[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\19405\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\19405\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Amazon.com Inc. Java 1.8.0_302)
[debug]       Load.loadUnit: plugins took 79.4856ms
[debug]       Load.loadUnit: defsScala took 0.3346ms
[debug] [Loading] Scanning directory C:\Users\19405\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\19405\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.1675 ms
[debug]           Load.resolveProject(global-plugins) took 61.6865ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\19405\.sbt\1.0\plugins, plugins: List(<none>))) took 107.4689ms
[debug] [Loading] Done in C:\Users\19405\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 129.0261ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2959ms
[debug]     Load.loadUnit(file:/C:/Users/19405/.sbt/1.0/plugins/, ...) took 216.5594ms
[debug]   Load.apply: load took 6836.9885ms
[debug]   Load.apply: resolveProjects took 6.0873ms
[debug]   Load.apply: finalTransforms took 58.3495ms
[debug]   Load.apply: config.delegates took 8.8484ms
[debug]   Load.apply: Def.make(settings)... took 400.0969ms
[debug]   Load.apply: structureIndex took 112.0014ms
[debug]   Load.apply: mkStreams took 8.0198ms
[info] loading global plugins from C:\Users\19405\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 9329.2636ms
[debug]           Load.loadUnit: plugins took 18.3107ms
[debug]           Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\19405\Desktop\UIC-F'21\441\WordCount\project
[debug]             Load.loadUnit: mkEval took 5.4402ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\19405\Desktop\UIC-F'21\441\WordCount\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7698 ms
[info] loading settings for project wordcount-build from assembly.sbt,idea1.sbt ...
[debug]               Load.resolveProject(wordcount-build) took 2.677ms
[debug]             Load.loadTransitive: finalizeProject(Project(id wordcount-build, base: C:\Users\19405\Desktop\UIC-F'21\441\WordCount\project, plugins: List(<none>))) took 4.9524ms
[debug] [Loading] Done in C:\Users\19405\Desktop\UIC-F'21\441\WordCount\project, returning: (wordcount-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2550.6435ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.8966ms
[debug]         Load.loadUnit(file:/C:/Users/19405/Desktop/UIC-F'21/441/WordCount/project/, ...) took 2574.9026ms
[debug]       Load.apply: load took 2576.3462ms
[debug]       Load.apply: resolveProjects took 0.1206ms
[debug]       Load.apply: finalTransforms took 7.7691ms
[debug]       Load.apply: config.delegates took 0.3819ms
[debug]       Load.apply: Def.make(settings)... took 67.0953ms
[debug]       Load.apply: structureIndex took 22.6582ms
[debug]       Load.apply: mkStreams took 0.0045ms
[info] loading project definition from C:\Users\19405\Desktop\UIC-F'21\441\WordCount\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 8442.5864ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\19405\Desktop\UIC-F'21\441\WordCount
[debug]       Load.loadUnit: mkEval took 0.4638ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\19405\Desktop\UIC-F'21\441\WordCount, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4208 ms
[info] loading settings for project wordcount from build.sbt ...
[debug]         Load.resolveProject(wordcount) took 24.8534ms
[debug]       Load.loadTransitive: finalizeProject(Project(id wordcount, base: C:\Users\19405\Desktop\UIC-F'21\441\WordCount, plugins: List(<none>))) took 29.9108ms
[debug] [Loading] Done in C:\Users\19405\Desktop\UIC-F'21\441\WordCount, returning: (wordcount)
[debug]     Load.loadUnit: loadedProjectsRaw took 1451.8093ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.0785ms
[debug]   Load.loadUnit(file:/C:/Users/19405/Desktop/UIC-F'21/441/WordCount/, ...) took 9904.0067ms
[debug] Load.apply: load took 9905.681ms
[debug] Load.apply: resolveProjects took 0.1333ms
[debug] Load.apply: finalTransforms took 24.5962ms
[debug] Load.apply: config.delegates took 0.3315ms
[debug] Load.apply: Def.make(settings)... took 64.989ms
[debug] Load.apply: structureIndex took 21.2372ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to WordCount (in build file:/C:/Users/19405/Desktop/UIC-F'21/441/WordCount/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51573 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51573, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordCount (in build file:/C:/Users/19405/Desktop/UIC-F'21/441/WordCount/)
[debug] > Exec(idea-shell, None, None)
